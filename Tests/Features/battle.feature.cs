// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BattleParseForSingleUserFeature : object, Xunit.IClassFixture<BattleParseForSingleUserFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "battle.feature"
#line hidden
        
        public BattleParseForSingleUserFeature(BattleParseForSingleUserFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Battle parse for single user", "    Make sure the parser is handling all\n    scenario correct when parsing", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="One Auto-attack single monster")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Auto-attack single monster")]
        [Xunit.TraitAttribute("Category", "mytag")]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "120", "False", "False", "False", "False", "", "12A9", "Player One hits Azure for 120 damage.", new string[0])]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "94231", "True", "False", "False", "False", "", "12A9", "Critical! Player One hits Azure for 94231 damage.", new string[0])]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "96231", "True", "False", "False", "True", "", "12A9", "Critical direct hit! Player One hits Azure for 96231 damage.", new string[0])]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "96231", "False", "False", "False", "True", "", "12A9", "Direct hit! Player One hits Azure for 96231 damage.", new string[0])]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "96231", "False", "True", "False", "False", "-20", "12A9", "Blocked! Player One hits Azure for 96231 (-20%) damage.", new string[0])]
        [Xunit.InlineDataAttribute("English", "Player One", "Azure", "96231", "False", "False", "True", "False", "-25", "12A9", "Parried! Player One hits Azure for 96231 (-25%) damage.", new string[0])]
        public virtual void OneAuto_AttackSingleMonster(string language, string player, string monster, string damage, string crit, string blocked, string parry, string direct, string modifier, string code, string line, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("language", language);
            argumentsOfScenario.Add("player", player);
            argumentsOfScenario.Add("monster", monster);
            argumentsOfScenario.Add("damage", damage);
            argumentsOfScenario.Add("crit", crit);
            argumentsOfScenario.Add("blocked", blocked);
            argumentsOfScenario.Add("parry", parry);
            argumentsOfScenario.Add("direct", direct);
            argumentsOfScenario.Add("modifier", modifier);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("line", line);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Auto-attack single monster", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
    testRunner.Given(string.Format("Player with name {0}", player), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And(string.Format("Monster with name {0}", monster), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And(string.Format("{0} chat", language), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.When(string.Format("chat with code \"{0}\" and line \"{1}\"", code, line), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then(string.Format("Damage of {0} with critical hit: {1}, blocked: {2}, parry: {3}, direct hit: {4}, " +
                            "modifier: {5}, should be stored for player {6} against {7}", damage, crit, blocked, parry, direct, modifier, player, monster), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Fire III on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Fire III on single monster [English]")]
        public virtual void OneFireIIIOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Fire III on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 23
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table9.AddRow(new string[] {
                            "102B",
                            "\"Player One cast Fire III.\""});
                table9.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1024 damage.\""});
#line 26
    testRunner.When("multiple chat lines", ((string)(null)), table9, "When ");
#line hidden
#line 30
    testRunner.Then("Action Fire III with damage 1024, critical hit: False, blocked: False, parry: Fal" +
                        "se, direct hit: False, modifier: , should have been stored for player Player One" +
                        " against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Fire III with criticial hit on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Fire III with criticial hit on single monster [English]")]
        public virtual void OneFireIIIWithCriticialHitOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Fire III with criticial hit on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table10.AddRow(new string[] {
                            "102B",
                            "\"Player One cast Fire III.\""});
                table10.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Critical! Azure takes 1024 damage.\""});
#line 36
    testRunner.When("multiple chat lines", ((string)(null)), table10, "When ");
#line hidden
#line 40
    testRunner.Then("Action Fire III with damage 1024, critical hit: True, blocked: False, parry: Fals" +
                        "e, direct hit: False, modifier: , should have been stored for player Player One " +
                        "against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Fire III with direct hit on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Fire III with direct hit on single monster [English]")]
        public virtual void OneFireIIIWithDirectHitOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Fire III with direct hit on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table11.AddRow(new string[] {
                            "102B",
                            "\"Player One cast Fire III.\""});
                table11.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Direct hit! Azure takes 1024 damage.\""});
#line 46
    testRunner.When("multiple chat lines", ((string)(null)), table11, "When ");
#line hidden
#line 50
    testRunner.Then("Action Fire III with damage 1024, critical hit: False, blocked: False, parry: Fal" +
                        "se, direct hit: True, modifier: , should have been stored for player Player One " +
                        "against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Fire III with criticial direct hit on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Fire III with criticial direct hit on single monster [English]")]
        public virtual void OneFireIIIWithCriticialDirectHitOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Fire III with criticial direct hit on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table12.AddRow(new string[] {
                            "102B",
                            "\"Player One cast Fire III.\""});
                table12.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Critical direct hit! Azure takes 1024 damage.\""});
#line 56
    testRunner.When("multiple chat lines", ((string)(null)), table12, "When ");
#line hidden
#line 60
    testRunner.Then("Action Fire III with damage 1024, critical hit: True, blocked: False, parry: Fals" +
                        "e, direct hit: True, modifier: , should have been stored for player Player One a" +
                        "gainst Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Fire III with modifier on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Fire III with modifier on single monster [English]")]
        public virtual void OneFireIIIWithModifierOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Fire III with modifier on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table13.AddRow(new string[] {
                            "102B",
                            "\"Player One cast Fire III.\""});
                table13.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1024 (+68%) damage.\""});
#line 66
    testRunner.When("multiple chat lines", ((string)(null)), table13, "When ");
#line hidden
#line 70
    testRunner.Then("Action Fire III with damage 1024, critical hit: False, blocked: False, parry: Fal" +
                        "se, direct hit: False, modifier: +68, should have been stored for player Player " +
                        "One against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Bootshine with parry and negative modifier on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Bootshine with parry and negative modifier on single monster [English]")]
        public virtual void OneBootshineWithParryAndNegativeModifierOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Bootshine with parry and negative modifier on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table14.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Bootshine.\""});
                table14.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Parried! Azure takes 1024 (-68%) damage.\""});
#line 76
    testRunner.When("multiple chat lines", ((string)(null)), table14, "When ");
#line hidden
#line 80
    testRunner.Then("Action Bootshine with damage 1024, critical hit: False, blocked: False, parry: Tr" +
                        "ue, direct hit: False, modifier: -68, should have been stored for player Player " +
                        "One against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Bootshine with block and negative modifier on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Bootshine with block and negative modifier on single monster [English]")]
        public virtual void OneBootshineWithBlockAndNegativeModifierOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Bootshine with block and negative modifier on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 83
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table15.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Bootshine.\""});
                table15.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Blocked! Azure takes 1024 (-68%) damage.\""});
#line 86
    testRunner.When("multiple chat lines", ((string)(null)), table15, "When ");
#line hidden
#line 90
    testRunner.Then("Action Bootshine with damage 1024, critical hit: False, blocked: True, parry: Fal" +
                        "se, direct hit: False, modifier: -68, should have been stored for player Player " +
                        "One against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="One Bootshine and one True Strike on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "One Bootshine and one True Strike on single monster [English]")]
        public virtual void OneBootshineAndOneTrueStrikeOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("One Bootshine and one True Strike on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 93
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table16.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Bootshine.\""});
                table16.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1024 damage.\""});
                table16.AddRow(new string[] {
                            "102B",
                            "\"Player One uses True Strike.\""});
                table16.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1030 damage.\""});
#line 96
    testRunner.When("multiple chat lines", ((string)(null)), table16, "When ");
#line hidden
#line 102
    testRunner.Then("Action Bootshine with damage 1024, critical hit: False, blocked: False, parry: Fa" +
                        "lse, direct hit: False, modifier: , should have been stored for player Player On" +
                        "e against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
    testRunner.And("Action True Strike with damage 1030, critical hit: False, blocked: False, parry: " +
                        "False, direct hit: False, modifier: , should have been stored for player Player " +
                        "One against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Two party members doing an action each on single monster [English]")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "Two party members doing an action each on single monster [English]")]
        public virtual void TwoPartyMembersDoingAnActionEachOnSingleMonsterEnglish()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Two party members doing an action each on single monster [English]", null, tagsOfScenario, argumentsOfScenario);
#line 105
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 106
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
    testRunner.And("Player with name Player Two", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
    testRunner.And("Monster with name Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.And("English chat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table17.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Fist of Fire.\""});
                table17.AddRow(new string[] {
                            "102B",
                            "\"Player Two uses Bootshine.\""});
                table17.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1024 damage.\""});
                table17.AddRow(new string[] {
                            "102B",
                            "\"Player One uses True Strike.\""});
                table17.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Azure takes 1030 damage.\""});
#line 110
    testRunner.When("multiple chat lines", ((string)(null)), table17, "When ");
#line hidden
#line 117
    testRunner.Then("Action Bootshine with damage 1024, critical hit: False, blocked: False, parry: Fa" +
                        "lse, direct hit: False, modifier: , should have been stored for player Player Tw" +
                        "o against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
    testRunner.And("Action True Strike with damage 1030, critical hit: False, blocked: False, parry: " +
                        "False, direct hit: False, modifier: , should have been stored for player Player " +
                        "One against Azure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monster has an \"The\" in the chat log. Make sure to handle it correctly")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "Monster has an \"The\" in the chat log. Make sure to handle it correctly")]
        public virtual void MonsterHasAnTheInTheChatLog_MakeSureToHandleItCorrectly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monster has an \"The\" in the chat log. Make sure to handle it correctly", null, tagsOfScenario, argumentsOfScenario);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
    testRunner.Given("Monster with name Zonure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
    testRunner.When("chat with code \"28A9\" and line \"The zonure hits you for 1241 damage.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
    testRunner.Then("Damage of 1241 should be stored for Zonure against You.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monster do an delayed action attack. Make sure to bind the damage to that action")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "Monster do an delayed action attack. Make sure to bind the damage to that action")]
        public virtual void MonsterDoAnDelayedActionAttack_MakeSureToBindTheDamageToThatAction()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monster do an delayed action attack. Make sure to bind the damage to that action", null, tagsOfScenario, argumentsOfScenario);
#line 125
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 126
    testRunner.Given("Monster with name Ifrit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 127
    testRunner.And("Player with name Hessa Adn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("Player with name Ryu Yun", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("Player with name Dylune Eclipse", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.And("Player with name Mark Kero", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table18.AddRow(new string[] {
                            "282B",
                            "\"Ifrit uses Eruption.\""});
                table18.AddRow(new string[] {
                            "102B",
                            "\"Hessa AdnOmega casts Malefic.\""});
                table18.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Ifrit takes 588 damage.\""});
                table18.AddRow(new string[] {
                            "12A9",
                            "\"Ryu YunRagnarok hits Ifrit for 173 damage.\""});
                table18.AddRow(new string[] {
                            "102B",
                            "\"Dylune EclipseMoogle begins casting Verfire.\""});
                table18.AddRow(new string[] {
                            "3129",
                            "\" ⇒ Mark KeroRagnarok takes 1537 damage.\""});
#line 131
    testRunner.When("multiple chat lines", ((string)(null)), table18, "When ");
#line hidden
#line 139
    testRunner.Then("Damage of 1537 should be stored for Ifrit against Mark KeroRagnarok.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player absorbs hp with Energy Drain.")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "Player absorbs hp with Energy Drain.")]
        public virtual void PlayerAbsorbsHpWithEnergyDrain_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player absorbs hp with Energy Drain.", null, tagsOfScenario, argumentsOfScenario);
#line 141
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 142
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
    testRunner.And("Monster with name 4th Legion signifer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table19.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Energy Drain.\""});
                table19.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Critical! The 4th Legion signifer takes 7701 damage.\""});
                table19.AddRow(new string[] {
                            "112D",
                            "\" ⇒ Player One absorbs 2609 HP.\""});
#line 144
    testRunner.When("multiple chat lines", ((string)(null)), table19, "When ");
#line hidden
#line 149
    testRunner.Then("Cure of 2609 should be stored for Player One on Player One.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player do an combo.")]
        [Xunit.TraitAttribute("FeatureTitle", "Battle parse for single user")]
        [Xunit.TraitAttribute("Description", "Player do an combo.")]
        public virtual void PlayerDoAnCombo_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player do an combo.", null, tagsOfScenario, argumentsOfScenario);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 152
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
    testRunner.And("Monster with name Ifrit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table20.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Spinning Edge.\""});
                table20.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Ifrit takes 1024 damage.\""});
                table20.AddRow(new string[] {
                            "102B",
                            "\"Player One uses Gust Slash.\""});
                table20.AddRow(new string[] {
                            "12A9",
                            "\" ⇒ Ifrit takes 1084 damage.\""});
#line 154
    testRunner.When("multiple chat lines", ((string)(null)), table20, "When ");
#line hidden
#line 160
    testRunner.Then("Combo action Gust Slash with damage 1084 should be stored for Player One against " +
                        "Ifrit.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BattleParseForSingleUserFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BattleParseForSingleUserFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
