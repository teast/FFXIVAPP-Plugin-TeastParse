// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VariousChatlogsThatCanOccureRegardingHealingFeature : object, Xunit.IClassFixture<VariousChatlogsThatCanOccureRegardingHealingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "healing.feature"
#line hidden
        
        public VariousChatlogsThatCanOccureRegardingHealingFeature(VariousChatlogsThatCanOccureRegardingHealingFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Various chatlogs that can occure regarding healing", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="You recover hp with Souleater.")]
        [Xunit.TraitAttribute("FeatureTitle", "Various chatlogs that can occure regarding healing")]
        [Xunit.TraitAttribute("Description", "You recover hp with Souleater.")]
        public virtual void YouRecoverHpWithSouleater_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("You recover hp with Souleater.", null, tagsOfScenario, argumentsOfScenario);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("Player with name Player One", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("Player One is you", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
    testRunner.And("Monster with name Spirulina", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table13.AddRow(new string[] {
                            "082B",
                            "\"You use Souleater.\""});
                table13.AddRow(new string[] {
                            "0AA9",
                            "\" ⇒ The spirulina takes 8175 (+75%) damage.\""});
                table13.AddRow(new string[] {
                            "08AD",
                            "\" ⇒ You recover 5405 HP.\""});
#line 7
    testRunner.When("multiple chat lines", ((string)(null)), table13, "When ");
#line hidden
#line 12
    testRunner.Then("Cure of 5405 should be stored for You on You.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="White mage uses Plenary Indulgence to recover hp on party.")]
        [Xunit.TraitAttribute("FeatureTitle", "Various chatlogs that can occure regarding healing")]
        [Xunit.TraitAttribute("Description", "White mage uses Plenary Indulgence to recover hp on party.")]
        public virtual void WhiteMageUsesPlenaryIndulgenceToRecoverHpOnParty_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("White mage uses Plenary Indulgence to recover hp on party.", null, tagsOfScenario, argumentsOfScenario);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
    testRunner.Given("Player with name Player Whm1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 16
    testRunner.And("Player Whm1 is you", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("Player with name Player Brd1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.And("Player Brd1 is he", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And("Player with name Player Brd2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And("Player Brd2 is she", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table14.AddRow(new string[] {
                            "082B",
                            "\"You uses Plenary Indulgence.\""});
                table14.AddRow(new string[] {
                            "08AE",
                            "\" ⇒ You gains the effect of Confession.\""});
                table14.AddRow(new string[] {
                            "092E",
                            "\" ⇒ Player Brd1 gains the effect of Confession.\""});
                table14.AddRow(new string[] {
                            "092E",
                            "\" ⇒ Player Brd2 gains the effect of Confession.\""});
                table14.AddRow(new string[] {
                            "19AD",
                            "\"Your Plenary Indulgence restores 11400 of your HP.\""});
                table14.AddRow(new string[] {
                            "19AD",
                            "\"Player Brd1\'s Plenary Indulgence restores 11422 of his HP.\""});
                table14.AddRow(new string[] {
                            "19AD",
                            "\"Player Brd2\'s Plenary Indulgence restores 11433 of her HP.\""});
#line 21
    testRunner.When("multiple chat lines", ((string)(null)), table14, "When ");
#line hidden
#line 30
    testRunner.Then("Cure of 11400 should be stored for You on You.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
    testRunner.And("Cure of 11422 should be stored for You on Player Brd1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("Cure of 11433 should be stored for You on Player Brd2.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Scholar uses Horoscope to recover hp on party.")]
        [Xunit.TraitAttribute("FeatureTitle", "Various chatlogs that can occure regarding healing")]
        [Xunit.TraitAttribute("Description", "Scholar uses Horoscope to recover hp on party.")]
        public virtual void ScholarUsesHoroscopeToRecoverHpOnParty_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scholar uses Horoscope to recover hp on party.", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
    testRunner.Given("Player with name Player Sch1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
    testRunner.And("Player Sch1 is you", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.And("Player with name Player Brd1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.And("Player Brd1 is he", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
    testRunner.And("Player with name Player Brd2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And("Player Brd2 is she", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table15.AddRow(new string[] {
                            "082B",
                            "\"You uses Horoscope.\""});
                table15.AddRow(new string[] {
                            "08AE",
                            "\" ⇒ You gains the effect of Horoscope.\""});
                table15.AddRow(new string[] {
                            "092E",
                            "\" ⇒ Player Brd1 gains the effect of Horoscope.\""});
                table15.AddRow(new string[] {
                            "092E",
                            "\" ⇒ Player Brd2 gains the effect of Horoscope.\""});
                table15.AddRow(new string[] {
                            "19AD",
                            "\"Your Horoscope restores 11400 of your HP.\""});
                table15.AddRow(new string[] {
                            "19AD",
                            "\"Player Brd1\'s Horoscope restores 11422 of his HP.\""});
                table15.AddRow(new string[] {
                            "19AD",
                            "\"Player Brd2\'s Horoscope restores 11433 of her HP.\""});
#line 41
    testRunner.When("multiple chat lines", ((string)(null)), table15, "When ");
#line hidden
#line 50
    testRunner.Then("Cure of 11400 should be stored for You on You.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.And("Cure of 11422 should be stored for You on Player Brd1.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.And("Cure of 11433 should be stored for You on Player Brd2.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VariousChatlogsThatCanOccureRegardingHealingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VariousChatlogsThatCanOccureRegardingHealingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
