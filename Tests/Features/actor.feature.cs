// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestThatWeHandlesActorInformationCorrectlyFeature : object, Xunit.IClassFixture<TestThatWeHandlesActorInformationCorrectlyFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "actor.feature"
#line hidden
        
        public TestThatWeHandlesActorInformationCorrectlyFeature(TestThatWeHandlesActorInformationCorrectlyFeature.FixtureData fixtureData, Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Test that we handles actor information correctly", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CurrentPlayer do an action. Then register it in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "CurrentPlayer do an action. Then register it in database")]
        public virtual void CurrentPlayerDoAnAction_ThenRegisterItInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CurrentPlayer do an action. Then register it in database", null, tagsOfScenario, argumentsOfScenario);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
    testRunner.Given("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    testRunner.And("Gudrun Arneson is you", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table1.AddRow(new string[] {
                            "082B",
                            "\"You use Devilment.\""});
                table1.AddRow(new string[] {
                            "08AE",
                            "\" ⇒ You gain the effect of Devilment.\""});
#line 6
    testRunner.When("multiple chat lines", ((string)(null)), table1, "When ");
#line hidden
#line 10
    testRunner.Then("actor with name Gudrun Arneson that is you exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Party player do an action. Then register it in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Party player do an action. Then register it in database")]
        public virtual void PartyPlayerDoAnAction_ThenRegisterItInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Party player do an action. Then register it in database", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
    testRunner.Given("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table2.AddRow(new string[] {
                            "102B",
                            "\"Gudrun Arneson use Devilment.\""});
                table2.AddRow(new string[] {
                            "102E",
                            "\" ⇒ Gudrun Arneson gain the effect of Devilment.\""});
#line 14
    testRunner.When("multiple chat lines", ((string)(null)), table2, "When ");
#line hidden
#line 18
    testRunner.Then("actor with name Gudrun Arneson that is party exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Alliance player do an action. Then register it in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Alliance player do an action. Then register it in database")]
        public virtual void AlliancePlayerDoAnAction_ThenRegisterItInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alliance player do an action. Then register it in database", null, tagsOfScenario, argumentsOfScenario);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.Given("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table3.AddRow(new string[] {
                            "182B",
                            "\"Gudrun Arneson use Devilment.\""});
                table3.AddRow(new string[] {
                            "182E",
                            "\" ⇒ Gudrun Arneson gain the effect of Devilment.\""});
#line 22
    testRunner.When("multiple chat lines", ((string)(null)), table3, "When ");
#line hidden
#line 26
    testRunner.Then("actor with name Gudrun Arneson that is alliance exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unengaged do an action. Then register it in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Unengaged do an action. Then register it in database")]
        public virtual void UnengagedDoAnAction_ThenRegisterItInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unengaged do an action. Then register it in database", null, tagsOfScenario, argumentsOfScenario);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
    testRunner.Given("Monster with name Shadowkeeper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
    testRunner.And("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table4.AddRow(new string[] {
                            "302B",
                            "\"The Shadowkeeper uses Backward Implosion.\""});
                table4.AddRow(new string[] {
                            "3129",
                            "\" ⇒ Gudrun Arneson takes 85237 damage.\""});
#line 31
    testRunner.When("multiple chat lines", ((string)(null)), table4, "When ");
#line hidden
#line 35
    testRunner.Then("actor with name Shadowkeeper that is monster exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Engaged do an action. Then register it in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Engaged do an action. Then register it in database")]
        public virtual void EngagedDoAnAction_ThenRegisterItInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Engaged do an action. Then register it in database", null, tagsOfScenario, argumentsOfScenario);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given("Monster with name Shadowkeeper", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.And("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table5.AddRow(new string[] {
                            "282B",
                            "\"The Shadowkeeper uses Backward Implosion.\""});
                table5.AddRow(new string[] {
                            "2929",
                            "\" ⇒ Gudrun Arneson takes 85237 damage.\""});
#line 40
    testRunner.When("multiple chat lines", ((string)(null)), table5, "When ");
#line hidden
#line 44
    testRunner.Then("actor with name Shadowkeeper that is monster exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Party player that do not exist in memory list of players. Should still be registe" +
            "red in database but with \"not in memory\" set")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Party player that do not exist in memory list of players. Should still be registe" +
            "red in database but with \"not in memory\" set")]
        public virtual void PartyPlayerThatDoNotExistInMemoryListOfPlayers_ShouldStillBeRegisteredInDatabaseButWithNotInMemorySet()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Party player that do not exist in memory list of players. Should still be registe" +
                    "red in database but with \"not in memory\" set", null, tagsOfScenario, argumentsOfScenario);
#line 46
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 47
    testRunner.Given("empty actor memory list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table6.AddRow(new string[] {
                            "102B",
                            "\"Gudrun Arneson use Devilment.\""});
                table6.AddRow(new string[] {
                            "102E",
                            "\" ⇒ Gudrun Arneson gain the effect of Devilment.\""});
#line 48
    testRunner.When("multiple chat lines", ((string)(null)), table6, "When ");
#line hidden
#line 52
    testRunner.Then("actor with name Gudrun Arneson that is not from memory and is party exists in dat" +
                        "abase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Player that starts to exist in memory list should have their \"not in memory\" flag" +
            " updated in database")]
        [Xunit.TraitAttribute("FeatureTitle", "Test that we handles actor information correctly")]
        [Xunit.TraitAttribute("Description", "Player that starts to exist in memory list should have their \"not in memory\" flag" +
            " updated in database")]
        public virtual void PlayerThatStartsToExistInMemoryListShouldHaveTheirNotInMemoryFlagUpdatedInDatabase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player that starts to exist in memory list should have their \"not in memory\" flag" +
                    " updated in database", null, tagsOfScenario, argumentsOfScenario);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
    testRunner.Given("empty actor memory list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table7.AddRow(new string[] {
                            "102B",
                            "\"Gudrun Arneson use Devilment.\""});
                table7.AddRow(new string[] {
                            "102E",
                            "\" ⇒ Gudrun Arneson gain the effect of Devilment.\""});
#line 56
    testRunner.When("multiple chat lines", ((string)(null)), table7, "When ");
#line hidden
#line 60
    testRunner.Then("actor with name Gudrun Arneson that is not from memory and is party exists in dat" +
                        "abase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.When("Player with name Gudrun Arneson", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "code",
                            "line"});
                table8.AddRow(new string[] {
                            "102B",
                            "\"Gudrun Arneson use Devilment.\""});
                table8.AddRow(new string[] {
                            "102E",
                            "\" ⇒ Gudrun Arneson gain the effect of Devilment.\""});
#line 62
    testRunner.And("multiple chat lines", ((string)(null)), table8, "And ");
#line hidden
#line 66
    testRunner.Then("actor with name Gudrun Arneson that is party exists in database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TestThatWeHandlesActorInformationCorrectlyFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TestThatWeHandlesActorInformationCorrectlyFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
